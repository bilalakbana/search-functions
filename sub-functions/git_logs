gfzf() {
    local filter=""
    if [ -n "$*" ] && [ -e "$*" ]; then
        filter="-- $*"
    fi

    export LESS='-R'
    export BAT_PAGER='less -S -R -M -i'

    git log \
        --graph --color=always --abbrev=7 --glob="refs/heads/*" \
        --format=format:"%C(bold blue)%h%C(reset) %C(dim white)%an%C(reset)%C(bold yellow)%d%C(reset) %C(white)%s%C(reset) %C(bold green)(%ar)%C(reset)" "$@" | \
        fzf --exact --ansi --no-sort --wrap --layout reverse --tiebreak index \
            --preview "f() { set -- \$(echo -- \$@ | rg -o '\b[a-f0-9]{7,}\b'); [ \$# -eq 0 ] || git show --color=always \$1 $filter | delta --line-numbers; }; f {}" \
            --border top \
            --border-label " $(echo $PWD | sed "s/^[^/]\\+$/\x1b[32m&/" | sed "s/\\(.*\\/\\)\\(.*\\)/\x1b[34m\\1\x1b[32m\\2/" | sed "s/\//\x1b[33m\/\x1b[34m/g") " \
            --color 'fg:252,fg+:252,bg:234,bg+:235,hl:magenta,hl+:magenta,info:144,border:240,prompt:161,pointer:161,marker:118,spinner:118,header:168' \
            --bind "ctrl-j:preview-down,ctrl-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up" \
            --bind "ctrl-m:execute:(rg -o '\b[a-f0-9]{7,}\b' | head -1 | xargs -I % -- git show --color=always %) <<< {}" \
            --bind "ctrl-v:execute-silent:(f() { set -- \$(rg -o '\b[a-f0-9]{7,}\b' <<< {} | head -1 | tr -d '\n'); [[ -n \$TMUX ]] && tmux display -d0 \"\$(git branch --contains \$1 | sed 's/^\\*\\?\\s\\+//' | LC_ALL=C sort | paste -sd, - | sed -e 's/,/, /g' -e 's/^/#[bg=blue,italics] Branches #[none,fg=black,bg=default] /')\"; }; f)" \
            --bind "ctrl-g:execute-silent:(f() { set -- \$(rg -o '\b[a-f0-9]{7,}\b' <<< {} | head -1 | tr -d '\n'); SUMMARY=\$(git show --format='%s' \$1 | head -1); [[ -n \$TMUX ]] && tmux display -d0 \"\$(git log --all --format='%H' -F --grep=\"\$SUMMARY\" | xargs -I{} -- git branch --contains {} | sed 's/^\\*\\?\\s\\+//' | LC_ALL=C sort | uniq | paste -sd, - | sed -e 's/,/, /g' -e 's/^/#[bg=blue,italics] Branches (Grep) #[none,fg=black,bg=default] /')\"; }; f)" \
            --bind "ctrl-y:execute-silent:(f() { set -- \$(rg -o '\b[a-f0-9]{7,}\b' <<< {} | head -1 | tr -d '\n'); printf '%s' \$1 | clipboard; [[ -n \$TMUX ]] && tmux display \"#[bg=blue,italics] Yanked #[none,fg=black,bg=default] \$1\"; }; f)" \
            --bind "ctrl-s:execute-silent:(f() { set -- \$(rg -o '\b[a-f0-9]{7,}\b' <<< {} | head -1 | tr -d '\n'); SUMMARY=\$(git show --format='%s' \$1 | head -1); printf '%s' \"\$SUMMARY\" | clipboard; [[ -n \$TMUX ]] && tmux display \"#[bg=blue,italics] Yanked #[none,fg=black,bg=default] \$SUMMARY\"; }; f)" \
            --bind 'alt-up:preview-page-up' \
            --bind 'alt-down:preview-page-down' \
            --bind "ctrl-alt-h:unix-line-discard" \
            --bind "alt-bs:unix-word-rubout" \
            --bind "ctrl-h:backward-kill-word" \
            --preview-window up:55%:wrap
}
logs() {
    COLUMNS=$(tput cols)
    HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
    FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
    DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

    local path_arg=""
    local git_args=()
    local original_dir="$PWD"

    for arg in "$@"; do
        if [[ -z "$path_arg" && -e "$arg" ]]; then
            path_arg=$(readlink -f "$arg")
        else
            git_args+=("$arg")
        fi
    done

    if [[ -n "$path_arg" ]]; then
        if [[ -d "$path_arg" ]]; then
            is_dir=true
            dir="$path_arg"
        else
            is_dir=false
            dir=$(dirname "$path_arg")
        fi

        cd "$dir" || { echo -e "\033[31mCannot cd into target directory.\033[0m"; return; }

        repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [[ -z "$repo_root" ]]; then
            echo -e "\033[31mNot inside a Git repository.\033[0m"
            cd "$original_dir"
            return
        fi

        submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
            [[ "$path_arg" == *"/$path/"* || "$path_arg" == *"/$path" ]] && echo "$path" && break
        done)

        if [[ -n "$submodule_path" ]]; then
            relative_path="${path_arg#*$submodule_path/}"
            cd "$repo_root/$submodule_path" || {
                echo -e "\033[31mCannot cd into submodule.\033[0m"
                cd "$original_dir"
                return
            }
        else
            relative_path="${path_arg#$repo_root/}"
            cd "$repo_root" || {
                echo -e "\033[31mCannot cd into repo root.\033[0m"
                cd "$original_dir"
                return
            }
        fi

        if [[ "$is_dir" == false ]]; then
            if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
                echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
                cd "$original_dir"
                return
            fi
        else
            if ! git ls-files "$relative_path" | grep -q .; then
                echo -e "\033[31m⚡ No tracked files found under directory:\033[0m $relative_path"
                cd "$original_dir"
                return
            fi
        fi

        git log --color=always --pretty=format:"$FORMAT" "$DATEOPT" --name-status "${git_args[@]}" -- "$relative_path" | less -R -i --mouse
        cd "$original_dir"
        return
    fi

    # Default case: no file/dir passed
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "\033[31mNot inside a Git repository.\033[0m"
        return
    fi

    git log --color=always --pretty=format:"$FORMAT" "$DATEOPT" --name-status "$@" | less -R -i --mouse
}
logs-and-diffs() {
    COLUMNS=$(tput cols)
    HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
    FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
    DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

    local path_arg=""
    local git_args=()
    local original_dir="$PWD"

    for arg in "$@"; do
        if [[ -z "$path_arg" && -e "$arg" ]]; then
            path_arg=$(readlink -f "$arg")
        else
            git_args+=("$arg")
        fi
    done

    _show_commit() {
        local sha="$1"
        git show -s --color=always $DATEOPT --pretty=format:"$FORMAT" "$sha"
        echo

        printf "\033[31mFiles:\033[0m\n"
        git show --color=always --format= --name-status "$sha"
        echo

        printf "\033[31mDiffs:\033[0m\n"
        if command -v delta >/dev/null 2>&1; then
            git show --color=always --format= -p "$sha" \
            | delta --width="$COLUMNS" --line-numbers \
                    --minus-style="syntax gray" --plus-style="syntax gray"
        else
            git show --color=always --format= -p "$sha"
        fi
        echo
    }

    if [[ -n "$path_arg" ]]; then
        if [[ -d "$path_arg" ]]; then
            is_dir=true; dir="$path_arg"
        else
            is_dir=false; dir=$(dirname "$path_arg")
        fi

        cd "$dir" || { echo -e "\033[31mCannot cd into target directory.\033[0m"; return; }

        repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [[ -z "$repo_root" ]]; then
            echo -e "\033[31mNot inside a Git repository.\033[0m"
            cd "$original_dir"; return
        fi

        submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
            [[ "$path_arg" == *"/$path/"* || "$path_arg" == *"/$path" ]] && echo "$path" && break
        done)

        if [[ -n "$submodule_path" ]]; then
            relative_path="${path_arg#*$submodule_path/}"
            cd "$repo_root/$submodule_path" || { echo -e "\033[31mCannot cd into submodule.\033[0m"; cd "$original_dir"; return; }
        else
            relative_path="${path_arg#$repo_root/}"
            cd "$repo_root" || { echo -e "\033[31mCannot cd into repo root.\033[0m"; cd "$original_dir"; return; }
        fi

        if [[ "$is_dir" == false ]]; then
            if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
                echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        else
            if ! git ls-files "$relative_path" | grep -q .; then
                echo -e "\033[31m⚡ No tracked files found under directory:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        fi

        {
            git log --format="%H" "${git_args[@]}" -- "$relative_path" \
            | while IFS= read -r sha; do _show_commit "$sha"; done
        } | less -R -i --mouse

        cd "$original_dir"; return
    fi

    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "\033[31mNot inside a Git repository.\033[0m"; return
    fi

    {
        git log --format="%H" "${git_args[@]}" \
        | while IFS= read -r sha; do _show_commit "$sha"; done
    } | less -R -i --mouse
}
logs-and-diffs-sbs() {
    COLUMNS=$(tput cols)
    HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
    FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
    DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

    local path_arg=""
    local git_args=()
    local original_dir="$PWD"

    for arg in "$@"; do
        if [[ -z "$path_arg" && -e "$arg" ]]; then
            path_arg=$(readlink -f "$arg")
        else
            git_args+=("$arg")
        fi
    done

    _show_commit() {
        local sha="$1"
        git show -s --color=always $DATEOPT --pretty=format:"$FORMAT" "$sha"
        echo

        printf "\033[31mFiles:\033[0m\n"
        git show --color=always --format= --name-status "$sha"
        echo

        printf "\033[31mDiffs:\033[0m\n"
        if command -v delta >/dev/null 2>&1; then
            git show --color=always --format= -p "$sha" \
            | delta --side-by-side --width="$COLUMNS" --line-numbers \
                    --minus-style="syntax gray" --plus-style="syntax gray"
        else
            git show --color=always --format= -p "$sha"
        fi
        echo
    }

    if [[ -n "$path_arg" ]]; then
        if [[ -d "$path_arg" ]]; then
            is_dir=true; dir="$path_arg"
        else
            is_dir=false; dir=$(dirname "$path_arg")
        fi

        cd "$dir" || { echo -e "\033[31mCannot cd into target directory.\033[0m"; return; }

        repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [[ -z "$repo_root" ]]; then
            echo -e "\033[31mNot inside a Git repository.\033[0m"
            cd "$original_dir"; return
        fi

        submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
            [[ "$path_arg" == *"/$path/"* || "$path_arg" == *"/$path" ]] && echo "$path" && break
        done)

        if [[ -n "$submodule_path" ]]; then
            relative_path="${path_arg#*$submodule_path/}"
            cd "$repo_root/$submodule_path" || { echo -e "\033[31mCannot cd into submodule.\033[0m"; cd "$original_dir"; return; }
        else
            relative_path="${path_arg#$repo_root/}"
            cd "$repo_root" || { echo -e "\033[31mCannot cd into repo root.\033[0m"; cd "$original_dir"; return; }
        fi

        if [[ "$is_dir" == false ]]; then
            if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
                echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        else
            if ! git ls-files "$relative_path" | grep -q .; then
                echo -e "\033[31m⚡ No tracked files found under directory:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        fi

        {
            git log --format="%H" "${git_args[@]}" -- "$relative_path" \
            | while IFS= read -r sha; do _show_commit "$sha"; done
        } | less -R -i --mouse

        cd "$original_dir"; return
    fi

    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "\033[31mNot inside a Git repository.\033[0m"; return
    fi

    {
        git log --format="%H" "${git_args[@]}" \
        | while IFS= read -r sha; do _show_commit "$sha"; done
    } | less -R -i --mouse
}
logs-and-diffs-full() {
    COLUMNS=$(tput cols)
    HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
    FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
    DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

    local path_arg=""
    local git_args=()
    local original_dir="$PWD"

    for arg in "$@"; do
        if [[ -z "$path_arg" && -e "$arg" ]]; then
            path_arg=$(readlink -f "$arg")
        else
            git_args+=("$arg")
        fi
    done

    _show_commit() {
        local sha="$1"
        git show -s --color=always $DATEOPT --pretty=format:"$FORMAT" "$sha"
        echo

        printf "\033[31mFiles:\033[0m\n"
        git show --color=always --format= --name-status "$sha"
        echo

        printf "\033[31mDiffs:\033[0m\n"
        if command -v delta >/dev/null 2>&1; then
            git show --color=always --format= -p --unified=99999999999 "$sha" \
            | delta --width="$COLUMNS" --line-numbers \
                    --minus-style="syntax gray" --plus-style="syntax gray"
        else
            git show --color=always --format= -p --unified=99999999999 "$sha"
        fi
        echo
    }

    if [[ -n "$path_arg" ]]; then
        if [[ -d "$path_arg" ]]; then
            is_dir=true; dir="$path_arg"
        else
            is_dir=false; dir=$(dirname "$path_arg")
        fi

        cd "$dir" || { echo -e "\033[31mCannot cd into target directory.\033[0m"; return; }

        repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [[ -z "$repo_root" ]]; then
            echo -e "\033[31mNot inside a Git repository.\033[0m"
            cd "$original_dir"; return
        fi

        submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
            [[ "$path_arg" == *"/$path/"* || "$path_arg" == *"/$path" ]] && echo "$path" && break
        done)

        if [[ -n "$submodule_path" ]]; then
            relative_path="${path_arg#*$submodule_path/}"
            cd "$repo_root/$submodule_path" || { echo -e "\033[31mCannot cd into submodule.\033[0m"; cd "$original_dir"; return; }
        else
            relative_path="${path_arg#$repo_root/}"
            cd "$repo_root" || { echo -e "\033[31mCannot cd into repo root.\033[0m"; cd "$original_dir"; return; }
        fi

        if [[ "$is_dir" == false ]]; then
            if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
                echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        else
            if ! git ls-files "$relative_path" | grep -q .; then
                echo -e "\033[31m⚡ No tracked files found under directory:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        fi

        {
            git log --format="%H" "${git_args[@]}" -- "$relative_path" \
            | while IFS= read -r sha; do _show_commit "$sha"; done
        } | less -R -i --mouse

        cd "$original_dir"; return
    fi

    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "\033[31mNot inside a Git repository.\033[0m"; return
    fi

    {
        git log --format="%H" "${git_args[@]}" \
        | while IFS= read -r sha; do _show_commit "$sha"; done
    } | less -R -i --mouse
}
logs-and-diffs-full-sbs() {
    COLUMNS=$(tput cols)
    HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
    FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
    DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

    local path_arg=""
    local git_args=()
    local original_dir="$PWD"

    for arg in "$@"; do
        if [[ -z "$path_arg" && -e "$arg" ]]; then
            path_arg=$(readlink -f "$arg")
        else
            git_args+=("$arg")
        fi
    done

    _show_commit() {
        local sha="$1"
        git show -s --color=always $DATEOPT --pretty=format:"$FORMAT" "$sha"
        echo

        printf "\033[31mFiles:\033[0m\n"
        git show --color=always --format= --name-status "$sha"
        echo

        printf "\033[31mDiffs:\033[0m\n"
        if command -v delta >/dev/null 2>&1; then
            git show --color=always --format= -p --unified=99999999999 "$sha" \
            | delta --side-by-side --width="$COLUMNS" --line-numbers \
                    --minus-style="syntax gray" --plus-style="syntax gray"
        else
            git show --color=always --format= -p --unified=99999999999 "$sha"
        fi
        echo
    }

    if [[ -n "$path_arg" ]]; then
        if [[ -d "$path_arg" ]]; then
            is_dir=true; dir="$path_arg"
        else
            is_dir=false; dir=$(dirname "$path_arg")
        fi

        cd "$dir" || { echo -e "\033[31mCannot cd into target directory.\033[0m"; return; }

        repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
        if [[ -z "$repo_root" ]]; then
            echo -e "\033[31mNot inside a Git repository.\033[0m"
            cd "$original_dir"; return
        fi

        submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
            [[ "$path_arg" == *"/$path/"* || "$path_arg" == *"/$path" ]] && echo "$path" && break
        done)

        if [[ -n "$submodule_path" ]]; then
            relative_path="${path_arg#*$submodule_path/}"
            cd "$repo_root/$submodule_path" || { echo -e "\033[31mCannot cd into submodule.\033[0m"; cd "$original_dir"; return; }
        else
            relative_path="${path_arg#$repo_root/}"
            cd "$repo_root" || { echo -e "\033[31mCannot cd into repo root.\033[0m"; cd "$original_dir"; return; }
        fi

        if [[ "$is_dir" == false ]]; then
            if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
                echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        else
            if ! git ls-files "$relative_path" | grep -q .; then
                echo -e "\033[31m⚡ No tracked files found under directory:\033[0m $relative_path"
                cd "$original_dir"; return
            fi
        fi

        {
            git log --format="%H" "${git_args[@]}" -- "$relative_path" \
            | while IFS= read -r sha; do _show_commit "$sha"; done
        } | less -R -i --mouse

        cd "$original_dir"; return
    fi

    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo -e "\033[31mNot inside a Git repository.\033[0m"; return
    fi

    {
        git log --format="%H" "${git_args[@]}" \
        | while IFS= read -r sha; do _show_commit "$sha"; done
    } | less -R -i --mouse
}
