#!/bin/bash

COLUMNS=$(tput cols)
HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

file=$(readlink -f "$1")

cd "$(dirname "$file")" || { echo -e "\033[31mCannot cd into file directory.\033[0m"; echo "Press any key to exit..."; read -n 1; exit; }
repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || { echo -e "\033[31mNot inside a Git repository.\033[0m"; echo "Press any key to exit..."; read -n 1; exit; }

export GIT_PAGER="less -R -+F -X; exit"

submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
    [[ "$file" == *"$path"* ]] && echo "$path" && break
done)

if [[ -n "$submodule_path" ]]; then
    relative_path="${file#*$submodule_path/}"
    cd "$repo_root/$submodule_path" || { echo -e "\033[31mCannot cd into submodule.\033[0m"; echo "Press any key to exit..."; read -n 1; exit; }
    if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
        echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
        echo "Press any key to exit..."
        read -n 1
        exit
    fi
    echo "==> $file (in submodule: $submodule_path)"
    git log --color=always --pretty=format:"$FORMAT" "$DATEOPT" --name-status -- "$relative_path"
else
    relative_path="${file#$repo_root/}"
    cd "$repo_root" || { echo -e "\033[31mCannot cd into repo root.\033[0m"; echo "Press any key to exit..."; read -n 1; exit; }
    if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
        echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
        echo "Press any key to exit..."
        read -n 1
        exit
    fi
    git log --color=always --pretty=format:"$FORMAT" "$DATEOPT" --name-status -- "$relative_path"
fi
