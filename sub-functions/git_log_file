#!/bin/bash

COLUMNS=$(tput cols)
HR=$(printf '%*s' "$COLUMNS" '' | tr ' ' '-')
FORMAT="$HR%n%C(red)<%an>%C(reset) %C(green)(%ar)%C(reset) %C(cyan)%ad%C(reset) - %C(yellow)%h%C(reset)%n%C(white)%s%C(reset)%n%C(magenta)%b%C(reset)"
DATEOPT="--date=format:%Y-%m-%d %H:%M:%S"

file=$(readlink -f "$1")

if [[ -z "$file" ]]; then
    echo -e "\033[31mNo file or folder provided.\033[0m"
    exit 1
fi

cd "$(dirname "$file")" || { echo -e "\033[31mCannot cd into file directory.\033[0m"; read -n 1 -r -p "Press any key to exit..."; exit 1; }
repo_root=$(git rev-parse --show-toplevel 2>/dev/null) || { echo -e "\033[31mNot inside a Git repository.\033[0m"; read -n 1 -r -p "Press any key to exit..."; exit 1; }

submodule_path=$(cd "$repo_root" && git config --file .gitmodules --get-regexp path 2>/dev/null | while read -r _ path; do
    [[ "$file" == *"$path"* ]] && echo "$path" && break
done)

if [[ -n "$submodule_path" ]]; then
    relative_path="${file#*$submodule_path/}"
    cd "$repo_root/$submodule_path" || { echo -e "\033[31mCannot cd into submodule.\033[0m"; read -n 1 -r -p "Press any key to exit..."; exit 1; }
else
    relative_path="${file#$repo_root/}"
    cd "$repo_root" || { echo -e "\033[31mCannot cd into repo root.\033[0m"; read -n 1 -r -p "Press any key to exit..."; exit 1; }
fi

# Check if it's a directory or file and validate accordingly
if [[ -d "$file" ]]; then
    if ! git ls-files "$relative_path" | grep -q .; then
        echo -e "\033[31m⚡ No tracked files found under directory:\033[0m $relative_path"
        read -n 1 -r -p "Press any key to exit..."
        exit 1
    fi
else
    if ! git ls-files --error-unmatch "$relative_path" >/dev/null 2>&1; then
        echo -e "\033[31m⚡ File is not tracked in Git:\033[0m $relative_path"
        read -n 1 -r -p "Press any key to exit..."
        exit 1
    fi
fi

# Now run git log
git log --color=always --pretty=format:"$FORMAT" "$DATEOPT" --name-status -- "$relative_path" | less -R -i --mouse
