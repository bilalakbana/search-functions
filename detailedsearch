detailedsearch() {
    local SEARCH_PATTERN="$1" && shift
    local GITIGNORE_OPT=""
    local ARGS=()

    # Check and remove --no-ignore first
    local NO_IGNORE=false
    for arg in "$@"; do
        if [[ "$arg" == "--no-ignore" ]]; then
            NO_IGNORE=true
        else
            ARGS+=("$arg")
        fi
    done

    # If --no-ignore is not provided and .gitignore exists, apply gitignore
    if ! $NO_IGNORE && [[ -f .gitignore ]]; then
        GITIGNORE_OPT="--exclude-from=.gitignore"
    fi

    # Process exclude patterns
    local FINAL_ARGS=()
    for arg in "${ARGS[@]}"; do
        if [[ $arg == --exclude=* ]]; then
            patterns=${arg#--exclude=}
            while [[ -n $patterns ]]; do
                pat=${patterns%%,*}
                FINAL_ARGS+=("--exclude=$pat")
                [[ $patterns == *,* ]] && patterns=${patterns#*,} || patterns=""
            done
        else
            FINAL_ARGS+=("$arg")
        fi
    done

    GREP_COLORS="ln=35:cx=33:mt=31" ugrep+ -Rzoian -B50 -A50 --sort $GITIGNORE_OPT --exclude='*.rar' --color=always "${FINAL_ARGS[@]}" -e "$SEARCH_PATTERN" 2>/dev/null | tr -d '\r' | \
    stdbuf -oL sed 's/\([^{]*\){[^}]*}/\1/' | \
    stdbuf -oL awk '!seen[$0]++' | \
    stdbuf -oL sed $'s/^\\([^:]*\\):/\x1b[34m\\1:/g' | \
    stdbuf -oL awk -F: 'BEGIN {OFS=FS} { gsub(/\//, "\033[33m/\033[34m", $1); print }' | \
    stdbuf -oL sed $'s/\x1b\\[34m\\([^/]*\\):/\x1b[32m\\1:/g' | \
    fzf --exact --no-sort --delimiter : --wrap --style full --ansi \
    --preview 'file=$(echo {1} | sed "s/\x1b\[[0-9;]*m//g"); file=${file#./}; dir=$(dirname "$file"); base=$(basename "$file"); echo -en "\033[1;31mFile    :\033[0m "; if [ "$dir" = "." ]; then echo -e "\033[1;32m$base"; else echo -e "\033[1;34m$(echo "$dir" | sed "s|/|\x1b[1;33m/\x1b[1;34m|g")\033[1;33m/\033[1;32m$base"; fi; $SHELL -c "printf \"\033[1;31mPattern :\033[0m \033[1;31m%s\033[0m\n\" \"'"$SEARCH_PATTERN"'\""; if ! [[ $(~/.SearchFunctions/sub-functions/is_text_file "$file") == "true" ]]; then ;matches_count=$(ugrep+ -zioa -e "'"$SEARCH_PATTERN"'" "$file" 2>/dev/null | wc -l) else matches_count=$(ugrep -iUo -e "'"$SEARCH_PATTERN"'" "$file" 2>/dev/null | wc -l); fi; echo -e "\033[1;31mMatches :\033[0m \033[1;31m$matches_count\033[0m"; echo -e "\033[1;37m═══════════════════════════════════════════════════════════════════\033[0m"; if [ -f "$file" ]; then if ! [[ $(~/.SearchFunctions/sub-functions/is_text_file "$file") == "true" ]]; then matches=$(GREP_COLORS="ln=35:sl=33:cx=33:mt=1;31:fn=32" ugrep+ -zniao -B200 -A200 --color=always -e "'"$SEARCH_PATTERN"'" "$file" 2>/dev/null | tr -d "\r"); else matches=$(GREP_COLORS="ln=35:sl=33:cx=33:mt=1;31:fn=32" ugrep -niU --color=always -e "'"$SEARCH_PATTERN"'" "$file" 2>/dev/null | tr -d "\r"); fi; if [ -n "$matches" ]; then nl=1; while IFS= read -r line; do printf "\033[1;32mMatch #%d \033[1;35m: \033[0m%s\n" "$nl" "$line"; printf "\033[1;37m───────────────────────────────────────────────────────────────────\033[0m\n"; ((nl++)); done <<<"$matches"; else echo -e "\033[1;31mNo matches found\033[0m"; fi; else echo -e "\033[1;31mFile not accessible: $file\033[0m"; fi' \
    --preview-window "up:50%:wrap" \
    --border top \
    --border-label " $(echo $PWD | sed "s/^[^/]\\+$/\x1b[32m&/" | sed "s/\\(.*\\/\\)\\(.*\\)/\x1b[34m\\1\x1b[32m\\2/" | sed "s/\//\x1b[33m\/\x1b[34m/g") " \
    --color 'fg:252,fg+:252,bg:234,bg+:235,hl:magenta,hl+:magenta,info:144,border:240,prompt:161,pointer:161,marker:118,spinner:118,header:168' \
    --bind "ctrl-l:toggle-preview" \
    --bind 'home:last,end:first' \
    --bind "alt-up:preview-page-up" \
    --bind "alt-down:preview-page-down" \
    --bind 'enter:execute-silent(nohup xdg-open {1})' \
    --bind "ctrl-e:execute-silent(~/.SearchFunctions/sub-functions/open_in_file_manager {1})" \
    --bind "ctrl-c:execute-silent(echo -n {1} | wl-copy)" \
    --bind "ctrl-o:execute-silent(tmux new-window -n nvim  nvim \"$(realpath \"{1}\"\"); tmux select-pane -T editor)" \
    --bind "ctrl-t:execute-silent(tmux new-window -n infile ~/.SearchFunctions/sub-functions/search_in_single_file \"$(realpath \"{1}\"\"); tmux select-pane -T file-content)" \
    --bind "ctrl-u:execute-silent(tmux new-window -n diff ~/.SearchFunctions/sub-functions/show_diffs \"$(realpath \"{1}\"\"); tmux select-pane -T git)" \
	--bind "ctrl-g:execute-silent(tmux new-window -n diff ~/.SearchFunctions/sub-functions/git_diff \"$(realpath \"{1}\"\"); tmux select-pane -T git)" \
	--bind "alt-g:execute-silent(tmux new-window -n diff ~/.SearchFunctions/sub-functions/git_diff_short \"$(realpath \"{1}\"\"); tmux select-pane -T git)" \
    --bind "alt-j:execute-silent(tmux new-window -n folders ~/.SearchFunctions/sub-functions/folder_list_ugrep; tmux select-pane -T folder-list)" \
    --bind "alt-u:execute-silent(tmux new-window -n logs ~/.SearchFunctions/sub-functions/show_logs \"$(realpath \"{1}\"\"); tmux select-pane -T git)" \
    --bind "ctrl-j:execute-silent(tmux new-window -n files ~/.SearchFunctions/sub-functions/file_list; tmux select-pane -T file-list)" \
    --bind "ctrl-alt-h:unix-line-discard" \
    --bind "alt-bs:unix-word-rubout" \
    --bind "ctrl-h:backward-kill-word"
}
